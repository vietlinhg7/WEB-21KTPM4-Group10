<!DOCTYPE HTML>
<html>

<head>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 18px; /* Đặt cỡ chữ to hơn theo nhu cầu */
    }

    @media only screen and (max-width: 600px) {
      #chartContainer {
        width: 100%;
        height: 400px; /* Điều chỉnh chiều cao nếu cần thiết */
      }
    }

    @media only screen and (min-width: 601px) and (max-width: 800px) {
      #chartContainer {
        width: 100%;
        height: 500px; /* Điều chỉnh chiều cao nếu cần thiết */
      }
    }

    /* Add more media queries as needed for different screen sizes */

    /* Default styling for larger screens */
    #chartContainer {
      width: 100%;
      height: 300px;
    }
  </style>
  <script type="text/javascript">
    window.onload = function () {
      fetch('/infoReport')
        .then(response => response.json())
        .then(data => {
        console.log('Dữ liệu từ server:', data);

          // Xử lý dữ liệu và cập nhật biểu đồ
          const processedData = processData(data);
          updateChart(processedData);
        })
        .catch(error => {
          console.error('Lỗi khi tải dữ liệu:', error);
      });
    };

    function processData(data) {
      const reportCachthuc = {};


      
          data.forEach(item => {
            
            
            console.log('cachthuc: ', item.cachthucxuly);
              // Đếm cho reportType
            reportCachthuc[item.cachthucxuly] = (reportCachthuc[item.cachthucxuly] || 0) + 1;

          
            
          });

      // Lấy tất cả các reportType từ dữ liệu
      const allReportTypes = Array.from(new Set(data.map(item => item.cachthucxuly)));

      // Đảm bảo rằng mỗi reportType đều có giá trị (thậm chí là 0) trong các đối tượng đếm
      allReportTypes.forEach(cachthucxuly => {
        reportCachthuc[cachthucxuly] = reportCachthuc[cachthucxuly] || 0;
      });

      // Chuyển đổi số lượng đếm thành định dạng dataPoints
      const reportTypeDataPoints = allReportTypes.map(cachthucxuly => {
        return { y: reportCachthuc[cachthucxuly], label: cachthucxuly };
      });

      
      return { cachthucxuly: reportTypeDataPoints};
    }

    function updateChart(data) {
    
      try {
          var chart = new CanvasJS.Chart("chartContainer", {
          title: {
            text: "Thống kê báo cáo"
          },
          axisY: {
            maximum: 20
          },
          data: [
            {
              type: "bar",
              showInLegend: true,
              legendText: "Số lượng",
              color: "gold",
              dataPoints: data.cachthucxuly
            },
          ]
        });

        

        chart.render();
      }catch (error) {
        console.error('Lỗi khi vẽ biểu đồ:', error);
      }
      
    }



  </script>
  <script type="text/javascript" src="https://cdn.canvasjs.com/canvasjs.min.js"></script>
</head>

<body>
  <div id="chartContainer"></div>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"
    integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous">
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/js/bootstrap.min.js"
    integrity="sha384-7VPbUDkoPSGFnVtYi0QogXtr74QeVeeIs99Qfg5YCF+TidwNdjvaKZX19NZ/e6oz" crossorigin="anonymous">
  </script>
</body>

</html>
